[assembly: System.Resources.NeutralResourcesLanguage("en-US")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v8.0", FrameworkDisplayName=".NET 8.0")]
public static class ModuleInitializer
{
    public static void Initialize() { }
}
namespace Orc.Snapshots
{
    public class FileSystemSnapshotStorageService : Orc.Snapshots.SnapshotStorageServiceBase
    {
        public FileSystemSnapshotStorageService(Orc.FileSystem.IDirectoryService directoryService, Orc.FileSystem.IFileService fileService, Catel.Services.IAppDataService appDataService) { }
        public string Directory { get; set; }
        protected virtual string GetSnapshotFileName(string directory, Orc.Snapshots.ISnapshot snapshot) { }
        protected virtual System.Threading.Tasks.Task<Orc.Snapshots.ISnapshot?> LoadSnapshotAsync(string source) { }
        public override System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Orc.Snapshots.ISnapshot>> LoadSnapshotsAsync() { }
        protected virtual System.Threading.Tasks.Task SaveSnapshotAsync(string source, Orc.Snapshots.ISnapshot snapshot) { }
        public override System.Threading.Tasks.Task SaveSnapshotsAsync(System.Collections.Generic.IEnumerable<Orc.Snapshots.ISnapshot> snapshots) { }
    }
    public interface ISnapshot
    {
        string Category { get; set; }
        System.DateTime Created { get; set; }
        string[] Keys { get; }
        string Title { get; set; }
        void ClearData(string key);
        System.Threading.Tasks.Task<byte[]> GetAllBytesAsync();
        System.Threading.Tasks.Task<string> GetContentHashAsync();
        byte[] GetData(string key);
        System.Threading.Tasks.Task InitializeFromBytesAsync(byte[] bytes);
        void SetData(string key, byte[] data);
    }
    public static class ISnapshotExtensions { }
    public interface ISnapshotManager
    {
        System.Collections.Generic.IEnumerable<Orc.Snapshots.ISnapshotProvider> Providers { get; }
        object? Scope { get; set; }
        System.Collections.Generic.IEnumerable<Orc.Snapshots.ISnapshot> Snapshots { get; }
        event System.EventHandler<System.EventArgs>? Loaded;
        event Catel.AsyncEventHandler<System.ComponentModel.CancelEventArgs>? LoadingAsync;
        event System.EventHandler<System.EventArgs>? Saved;
        event Catel.AsyncEventHandler<System.ComponentModel.CancelEventArgs>? SavingAsync;
        event System.EventHandler<Orc.Snapshots.SnapshotEventArgs>? SnapshotAdded;
        event System.EventHandler<Orc.Snapshots.SnapshotEventArgs>? SnapshotCreated;
        event Catel.AsyncEventHandler<Orc.Snapshots.SnapshotEventArgs>? SnapshotCreatingAsync;
        event System.EventHandler<Orc.Snapshots.SnapshotProviderEventArgs>? SnapshotProviderAdded;
        event System.EventHandler<Orc.Snapshots.SnapshotProviderEventArgs>? SnapshotProviderRemoved;
        event System.EventHandler<Orc.Snapshots.SnapshotEventArgs>? SnapshotRemoved;
        event System.EventHandler<Orc.Snapshots.SnapshotEventArgs>? SnapshotRestored;
        event Catel.AsyncEventHandler<Orc.Snapshots.SnapshotEventArgs>? SnapshotRestoringAsync;
        event System.EventHandler<System.EventArgs>? SnapshotsChanged;
        void Add(Orc.Snapshots.ISnapshot snapshot);
        void AddProvider(Orc.Snapshots.ISnapshotProvider snapshotProvider);
        System.Threading.Tasks.Task<Orc.Snapshots.ISnapshot> CreateSnapshotAsync(Orc.Snapshots.ISnapshot snapshot);
        System.Threading.Tasks.Task<bool> LoadAsync();
        bool Remove(Orc.Snapshots.ISnapshot snapshot);
        bool RemoveProvider(Orc.Snapshots.ISnapshotProvider snapshotProvider);
        System.Threading.Tasks.Task RestoreSnapshotAsync(Orc.Snapshots.ISnapshot snapshot);
        System.Threading.Tasks.Task<bool> SaveAsync();
    }
    public static class ISnapshotManagerExtensions
    {
        public static void AddProvider<TSnapshotProvider>(this Orc.Snapshots.ISnapshotManager snapshotManager)
            where TSnapshotProvider : Orc.Snapshots.ISnapshotProvider { }
        public static System.Threading.Tasks.Task<Orc.Snapshots.ISnapshot?> CreateSnapshotAndSaveAsync(this Orc.Snapshots.ISnapshotManager snapshotManager, string title, string category = "") { }
        public static System.Threading.Tasks.Task<Orc.Snapshots.ISnapshot?> CreateSnapshotAsync(this Orc.Snapshots.ISnapshotManager snapshotManager, string title, string category = "") { }
        public static Orc.Snapshots.ISnapshot? FindSnapshot(this Orc.Snapshots.ISnapshotManager snapshotManager, string title, string category = "") { }
        public static TSnapshot? FindSnapshot<TSnapshot>(this Orc.Snapshots.ISnapshotManager snapshotManager, string title, string category = "")
            where TSnapshot : Orc.Snapshots.ISnapshot { }
    }
    public interface ISnapshotProvider
    {
        string Name { get; }
        System.Threading.Tasks.Task CreatedSnapshotAsync(Orc.Snapshots.ISnapshot snapshot);
        System.Threading.Tasks.Task CreatingSnapshotAsync(Orc.Snapshots.ISnapshot snapshot);
        System.Collections.Generic.List<string> GetNames();
        System.Threading.Tasks.Task RestoreDataFromSnapshotAsync(string name, System.IO.Stream stream);
        System.Threading.Tasks.Task RestoredSnapshotAsync(Orc.Snapshots.ISnapshot snapshot);
        System.Threading.Tasks.Task RestoringSnapshotAsync(Orc.Snapshots.ISnapshot snapshot);
        System.Threading.Tasks.Task StoreDataToSnapshotAsync(string name, System.IO.Stream stream);
    }
    public interface ISnapshotStorageService
    {
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Orc.Snapshots.ISnapshot>> LoadSnapshotsAsync();
        System.Threading.Tasks.Task SaveSnapshotsAsync(System.Collections.Generic.IEnumerable<Orc.Snapshots.ISnapshot> snapshots);
    }
    public class InMemorySnapshotStorageService : Orc.Snapshots.SnapshotStorageServiceBase
    {
        public InMemorySnapshotStorageService() { }
        protected virtual System.Threading.Tasks.Task<Orc.Snapshots.ISnapshot?> LoadSnapshotAsync(string source) { }
        public override System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Orc.Snapshots.ISnapshot>> LoadSnapshotsAsync() { }
        protected virtual System.Threading.Tasks.Task SaveSnapshotAsync(string source, Orc.Snapshots.ISnapshot snapshot) { }
        public override System.Threading.Tasks.Task SaveSnapshotsAsync(System.Collections.Generic.IEnumerable<Orc.Snapshots.ISnapshot> snapshots) { }
    }
    [System.Serializable]
    public class InvalidSnapshotException : Orc.Snapshots.SnapshotException
    {
        public InvalidSnapshotException() { }
        public InvalidSnapshotException(Orc.Snapshots.ISnapshot snapshot) { }
    }
    public class Snapshot : Orc.Snapshots.ISnapshot
    {
        public Snapshot() { }
        public string Category { get; set; }
        public System.DateTime Created { get; set; }
        public string[] Keys { get; }
        public string Title { get; set; }
        public void ClearData(string key) { }
        public System.Threading.Tasks.Task<byte[]> GetAllBytesAsync() { }
        public System.Threading.Tasks.Task<string> GetContentHashAsync() { }
        public byte[] GetData(string key) { }
        public System.Threading.Tasks.Task InitializeFromBytesAsync(byte[] bytes) { }
        protected virtual System.Threading.Tasks.Task<System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, byte[]>>> LoadSnapshotDataAsync(byte[] bytes) { }
        protected virtual System.Threading.Tasks.Task<byte[]> SaveSnapshotDataAsync(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, byte[]>> data) { }
        public void SetData(string key, byte[] data) { }
        public override string ToString() { }
    }
    public class SnapshotEventArgs : System.EventArgs
    {
        public SnapshotEventArgs(Orc.Snapshots.ISnapshot snapshot) { }
        public Orc.Snapshots.ISnapshot Snapshot { get; }
    }
    [System.Serializable]
    public class SnapshotException : System.Exception
    {
        public SnapshotException() { }
        public SnapshotException(Orc.Snapshots.ISnapshot snapshot) { }
        public SnapshotException(Orc.Snapshots.ISnapshot snapshot, string message) { }
        public Orc.Snapshots.ISnapshot? Snapshot { get; }
    }
    [System.Serializable]
    public class SnapshotManagementInitializationException : System.Exception
    {
        public SnapshotManagementInitializationException() { }
        public SnapshotManagementInitializationException(Orc.Snapshots.ISnapshotManager snapshotManager) { }
        public Orc.Snapshots.ISnapshotManager? SnapshotManager { get; }
    }
    public class SnapshotManager : Orc.Snapshots.ISnapshotManager
    {
        public SnapshotManager(Orc.Snapshots.ISnapshotStorageService snapshotStorageService, Catel.IoC.IServiceLocator serviceLocator) { }
        public System.Collections.Generic.IEnumerable<Orc.Snapshots.ISnapshotProvider> Providers { get; }
        public object? Scope { get; set; }
        public System.Collections.Generic.IEnumerable<Orc.Snapshots.ISnapshot> Snapshots { get; }
        public int UniqueIdentifier { get; }
        public event System.EventHandler<System.EventArgs>? Loaded;
        public event Catel.AsyncEventHandler<System.ComponentModel.CancelEventArgs>? LoadingAsync;
        public event System.EventHandler<System.EventArgs>? Saved;
        public event Catel.AsyncEventHandler<System.ComponentModel.CancelEventArgs>? SavingAsync;
        public event System.EventHandler<Orc.Snapshots.SnapshotEventArgs>? SnapshotAdded;
        public event System.EventHandler<Orc.Snapshots.SnapshotEventArgs>? SnapshotCreated;
        public event Catel.AsyncEventHandler<Orc.Snapshots.SnapshotEventArgs>? SnapshotCreatingAsync;
        public event System.EventHandler<Orc.Snapshots.SnapshotProviderEventArgs>? SnapshotProviderAdded;
        public event System.EventHandler<Orc.Snapshots.SnapshotProviderEventArgs>? SnapshotProviderRemoved;
        public event System.EventHandler<Orc.Snapshots.SnapshotEventArgs>? SnapshotRemoved;
        public event System.EventHandler<Orc.Snapshots.SnapshotEventArgs>? SnapshotRestored;
        public event Catel.AsyncEventHandler<Orc.Snapshots.SnapshotEventArgs>? SnapshotRestoringAsync;
        public event System.EventHandler<System.EventArgs>? SnapshotsChanged;
        public void Add(Orc.Snapshots.ISnapshot snapshot) { }
        public void AddProvider(Orc.Snapshots.ISnapshotProvider snapshotProvider) { }
        public virtual System.Threading.Tasks.Task<Orc.Snapshots.ISnapshot> CreateSnapshotAsync(Orc.Snapshots.ISnapshot snapshot) { }
        public System.Threading.Tasks.Task<bool> LoadAsync() { }
        public bool Remove(Orc.Snapshots.ISnapshot snapshot) { }
        public bool RemoveProvider(Orc.Snapshots.ISnapshotProvider snapshotProvider) { }
        public virtual System.Threading.Tasks.Task RestoreSnapshotAsync(Orc.Snapshots.ISnapshot snapshot) { }
        public System.Threading.Tasks.Task<bool> SaveAsync() { }
    }
    public abstract class SnapshotProviderBase : Orc.Snapshots.ISnapshotProvider
    {
        protected readonly Catel.IoC.IServiceLocator ServiceLocator;
        protected SnapshotProviderBase(Orc.Snapshots.ISnapshotManager snapshotManager, Catel.IoC.IServiceLocator serviceLocator) { }
        public virtual string Name { get; protected set; }
        public virtual object? Scope { get; set; }
        protected Orc.Snapshots.ISnapshotManager SnapshotManager { get; set; }
        public object? Tag { get; set; }
        public virtual System.Threading.Tasks.Task CreatedSnapshotAsync(Orc.Snapshots.ISnapshot snapshot) { }
        public virtual System.Threading.Tasks.Task CreatingSnapshotAsync(Orc.Snapshots.ISnapshot snapshot) { }
        public virtual System.Collections.Generic.List<string> GetNames() { }
        public abstract System.Threading.Tasks.Task RestoreDataFromSnapshotAsync(string name, System.IO.Stream stream);
        public virtual System.Threading.Tasks.Task RestoredSnapshotAsync(Orc.Snapshots.ISnapshot snapshot) { }
        public virtual System.Threading.Tasks.Task RestoringSnapshotAsync(Orc.Snapshots.ISnapshot snapshot) { }
        public abstract System.Threading.Tasks.Task StoreDataToSnapshotAsync(string name, System.IO.Stream stream);
    }
    public class SnapshotProviderEventArgs : System.EventArgs
    {
        public SnapshotProviderEventArgs(Orc.Snapshots.ISnapshotProvider snapshotProvider) { }
        public Orc.Snapshots.ISnapshotProvider SnapshotProvider { get; }
    }
    public abstract class SnapshotStorageServiceBase : Orc.Snapshots.ISnapshotStorageService
    {
        protected SnapshotStorageServiceBase() { }
        protected virtual System.Threading.Tasks.Task<Orc.Snapshots.ISnapshot?> ConvertBytesToSnapshotAsync(byte[] bytes) { }
        protected virtual System.Threading.Tasks.Task<byte[]> ConvertSnapshotToBytesAsync(Orc.Snapshots.ISnapshot snapshot) { }
        public abstract System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Orc.Snapshots.ISnapshot>> LoadSnapshotsAsync();
        public abstract System.Threading.Tasks.Task SaveSnapshotsAsync(System.Collections.Generic.IEnumerable<Orc.Snapshots.ISnapshot> snapshots);
    }
}